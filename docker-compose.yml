services:
  # Armazenamento de Dados
  minio:
    image: minio/minio:RELEASE.2025-04-22T22-12-26Z
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - ./data/minio:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - dataflow-network

  # Apache Spark
  spark-master:
    image: bitnami/spark:3.5.5
    container_name: spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_RUN_AS_USER=root  # Executar como root para evitar problemas de permissão
      - ALLOW_PLAINTEXT_LISTENER=yes
    ports:
      - "7077:7077"
      - "8080:8080"
    volumes:
      - ./data/spark/master:/opt/bitnami/spark/data  # Mapeamento para diretório local
      - ./app:/opt/spark-apps
      - ./requirements.txt:/requirements.txt
    command: >
      bash -c "
        pip install --no-cache-dir --upgrade pip setuptools wheel &&
        pip install --no-cache-dir --default-timeout=100 --retries=5 -r /requirements.txt &&
        /opt/bitnami/scripts/spark/entrypoint.sh /opt/bitnami/scripts/spark/run.sh
      "
    networks:
      - dataflow-network

  spark-worker:
    image: bitnami/spark:3.5.5
    container_name: spark-worker
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_RUN_AS_USER=root  # Executar como root para evitar problemas de permissão
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - spark-master
    ports:
      - "8081:8081"
    volumes:
      - ./data/spark/worker:/opt/bitnami/spark/data  # Mapeamento para diretório local
      - ./app:/opt/spark-apps
      - ./requirements.txt:/requirements.txt
    command: >
      bash -c "
        pip install --no-cache-dir --upgrade pip setuptools wheel &&
        pip install --no-cache-dir --default-timeout=100 --retries=5 -r /requirements.txt &&
        /opt/bitnami/scripts/spark/entrypoint.sh /opt/bitnami/scripts/spark/run.sh
      "
    networks:
      - dataflow-network

  # MLflow
  mlflow:
    image: bitnami/mlflow:2.22.0
    container_name: mlflow
    user: root  # Executar como root para evitar problemas de permissão
    command: ["-m", "mlflow", "server", "--host", "0.0.0.0", "--backend-store-uri", "sqlite:////bitnami/mlflow/mlflow.db", "--default-artifact-root", "s3://mlflow/"]
    ports:
      - "5000:5000"
    environment:
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    volumes:
      - ./mlruns:/app/mlruns  # Mapeamento para diretório local de mlruns
      - ./models:/app/models  # Mapeamento para modelos
      - ./data/mlflow/db:/bitnami/mlflow  # Armazenamento do banco de dados
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - dataflow-network

  # Prefect
  prefect:
    image: prefecthq/prefect:2.14.10-python3.11
    container_name: prefect
    entrypoint: ["prefect", "server", "start", "--host", "0.0.0.0", "--port", "4200"]
    ports:
      - "4200:4200"
    environment:
      - PREFECT_UI_API_URL=http://localhost:4200/api
      - PREFECT_API_URL=http://localhost:4200/api
      - PREFECT_HOME=/opt/prefect
      - PREFECT_SERVER_DATABASE_URL=sqlite:////opt/prefect/prefect.db
      - PREFECT_SERVER_DATABASE_MIGRATE_ON_START=true  # Garantir que as migrações sejam aplicadas corretamente
    volumes:
      - ./data/prefect:/opt/prefect  # Mapeamento para diretório local
      - ./flows:/opt/prefect/flows  # Já mapeado diretamente para o diretório local
      - ./data:/opt/prefect/data    # Já mapeado diretamente para o diretório local
    networks:
      - dataflow-network

  jupyter:
    image: jupyterhub/jupyterhub:latest
    container_name: jupyterhub
    ports:
      - "8888:8000"
    volumes:
      - ./notebooks:/home/jovyan/work
      - ./jupyterhub_config.py:/srv/jupyterhub/jupyterhub_config.py
      - ./data/jupyter:/data
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker:/var/lib/docker
    command: >
      bash -c "apt-get update && apt-get install -y docker.io curl &&
      pip install notebook jupyterlab jupyterhub-idle-culler &&
      pip install jupyterhub oauthenticator dockerspawner &&
      jupyterhub -f /srv/jupyterhub/jupyterhub_config.py"
    networks:
      - dataflow-network
    depends_on:
      - minio
      - mlflow
      - prefect

  # Streamlit
  streamlit:
    build:
      context: ./config/streamlit
      dockerfile: Dockerfile
    container_name: streamlit
    ports:
      - "8501:8501"
    environment:
      - PATH=/.local/bin:${PATH}
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_ENDPOINT=http://minio:9000
    volumes:
      - ./app:/app
    networks:
      - dataflow-network
    depends_on:
      minio:
        condition: service_healthy
      mlflow:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  dataflow-network:
    driver: bridge
