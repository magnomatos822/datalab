services:
  # Armazenamento de Dados
  minio:
    image: minio/minio:RELEASE.2025-04-22T22-12-26Z
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - ./data/minio:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - dataflow-network

  # Apache Spark
  spark-master:
    image: bitnami/spark:3.5.5
    container_name: spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_RUN_AS_USER=root  # Executar como root para evitar problemas de permissão
      - ALLOW_PLAINTEXT_LISTENER=yes
    ports:
      - "7077:7077"
      - "8080:8080"
    volumes:
      - ./data/spark/master:/opt/bitnami/spark/data  # Mapeamento para diretório local
      - ./app:/opt/spark-apps
      - ./requirements.txt:/requirements.txt
    command: >
      bash -c "
        pip install --no-cache-dir --upgrade pip setuptools wheel &&
        pip install --no-cache-dir --default-timeout=100 --retries=5 -r /requirements.txt &&
        /opt/bitnami/scripts/spark/entrypoint.sh /opt/bitnami/scripts/spark/run.sh
      "
    networks:
      - dataflow-network

  spark-worker:
    image: bitnami/spark:3.5.5
    container_name: spark-worker
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_RUN_AS_USER=root  # Executar como root para evitar problemas de permissão
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - spark-master
    ports:
      - "8081:8081"
    volumes:
      - ./data/spark/worker:/opt/bitnami/spark/data  # Mapeamento para diretório local
      - ./app:/opt/spark-apps
      - ./requirements.txt:/requirements.txt
    command: >
      bash -c "
        pip install --no-cache-dir --upgrade pip setuptools wheel &&
        pip install --no-cache-dir --default-timeout=100 --retries=5 -r /requirements.txt &&
        /opt/bitnami/scripts/spark/entrypoint.sh /opt/bitnami/scripts/spark/run.sh
      "
    networks:
      - dataflow-network

  # MLflow
  mlflow:
    image: bitnami/mlflow:2.22.0
    container_name: mlflow
    user: root  # Executar como root para evitar problemas de permissão
    command: ["-m", "mlflow", "server", "--host", "0.0.0.0", "--backend-store-uri", "sqlite:////bitnami/mlflow/mlflow.db", "--default-artifact-root", "s3://mlflow/"]
    ports:
      - "5000:5000"
    environment:
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    volumes:
      - ./mlruns:/app/mlruns  # Mapeamento para diretório local de mlruns
      - ./models:/app/models  # Mapeamento para modelos
      - ./data/mlflow/db:/bitnami/mlflow  # Armazenamento do banco de dados
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - dataflow-network

  # Prefect
  prefect:
    image: prefecthq/prefect:2.14.10-python3.11
    container_name: prefect
    entrypoint: ["prefect", "server", "start", "--host", "0.0.0.0", "--port", "4200"]
    ports:
      - "4200:4200"
    environment:
      - PREFECT_UI_API_URL=http://localhost:4200/api
      - PREFECT_API_URL=http://localhost:4200/api
      - PREFECT_HOME=/opt/prefect
      - PREFECT_SERVER_DATABASE_URL=sqlite:////opt/prefect/prefect.db
      - PREFECT_SERVER_DATABASE_MIGRATE_ON_START=true  # Garantir que as migrações sejam aplicadas corretamente
    volumes:
      - ./data/prefect:/opt/prefect  # Mapeamento para diretório local
      - ./flows:/opt/prefect/flows  # Já mapeado diretamente para o diretório local
      - ./data:/opt/prefect/data    # Já mapeado diretamente para o diretório local
    networks:
      - dataflow-network

  jupyter:
    image: jupyterhub/jupyterhub:latest
    container_name: jupyterhub
    ports:
      - "8888:8000"
    volumes:
      - ./notebooks:/home/jovyan/work
      - ./jupyterhub_config.py:/srv/jupyterhub/jupyterhub_config.py
      - ./data/jupyter:/data
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker:/var/lib/docker
    command: >
      bash -c "apt-get update && apt-get install -y docker.io curl &&
      pip install notebook jupyterlab jupyterhub-idle-culler &&
      pip install jupyterhub oauthenticator dockerspawner &&
      jupyterhub -f /srv/jupyterhub/jupyterhub_config.py"
    networks:
      - dataflow-network
    depends_on:
      - minio
      - mlflow
      - prefect

  # Streamlit
  streamlit:
    build:
      context: ./config/streamlit
      dockerfile: Dockerfile
    container_name: streamlit
    ports:
      - "8501:8501"
    environment:
      - PATH=/.local/bin:${PATH}
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_ENDPOINT=http://minio:9000
    volumes:
      - ./app:/app
    networks:
      - dataflow-network
    depends_on:
      minio:
        condition: service_healthy
      mlflow:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501"]
      interval: 30s
      timeout: 10s
      retries: 3

  nifi:
    environment:
      - SINGLE_USER_CREDENTIALS_USERNAME=nifi
      - SINGLE_USER_CREDENTIALS_PASSWORD=HGd15bvfv8744ghbdhgdv7895agqERAo
      - TZ=America/Fortaleza
    image: apache/nifi:2.4.0
    container_name: apache-nifi
    ports:
      - "8443:8443"
    deploy:
      resources:
        limits:
          cpus: "0.95"
          memory: 1G
    restart: on-failure
    volumes: 
      - ./nifi/jdbc:/opt/nifi/nifi-current/jdbc  # Mantendo o volume original para compatibilidade
      - ./nifi/drivers:/opt/nifi/nifi-current/drivers  # Novo volume para organizar drivers por tipo
      - nifi-logs:/opt/nifi/nifi-current/logs
      - nifi-conf:/opt/nifi/nifi-current/conf
      - nifi-state:/opt/nifi/nifi-current/state
      - nifi-content:/opt/nifi/nifi-current/content_repository
      - nifi-database:/opt/nifi/nifi-current/database_repository
      - nifi-flowfile:/opt/nifi/nifi-current/flowfile_repository
      - nifi-provenance:/opt/nifi/nifi-current/provenance_repository
    networks:
      - dataflow-network
    # Comando inicial para baixar drivers comuns, se necessário
    command: >
      bash -c "
        mkdir -p /opt/nifi/nifi-current/drivers/postgres &&
        mkdir -p /opt/nifi/nifi-current/drivers/mysql &&
        mkdir -p /opt/nifi/nifi-current/drivers/mssql &&
        mkdir -p /opt/nifi/nifi-current/drivers/oracle &&
        cp /opt/nifi/nifi-current/jdbc/postgresql-42.6.0.jar /opt/nifi/nifi-current/drivers/postgres/ &&
        /opt/nifi/scripts/start.sh
      "

  # Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - dataflow-network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    volumes:
      - kafka-data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - dataflow-network

  # UI moderna para o Kafka
  kafka-ui:
    image: provectuslabs/kafka-ui:v0.7.1
    container_name: kafka-ui
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8090:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: DataLab Kafka
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      DYNAMIC_CONFIG_ENABLED: 'true'
      SERVER_SERVLET_CONTEXT_PATH: "/"
    networks:
      - dataflow-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
    nifi-logs:
    nifi-conf:
    nifi-state:
    nifi-content:
    nifi-database:
    nifi-flowfile:
    nifi-provenance:
    zookeeper-data:
    zookeeper-logs:
    kafka-data:
networks:
  dataflow-network:
    driver: bridge
