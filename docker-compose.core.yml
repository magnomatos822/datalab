services:
  # Armazenamento de Dados
  minio:
    image: bitnami/minio:latest
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-admin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-admin123}
      - MINIO_DEFAULT_BUCKETS=bronze,silver,gold,mlflow,prefect,spark,jupyter,airflow,nifi,kafka
      - MINIO_SERVER_PORT_NUMBER=9000
      - MINIO_CONSOLE_PORT_NUMBER=9001
      - MINIO_DAEMON_UID=0
      - MINIO_DAEMON_GID=0
      - BITNAMI_DEBUG=true
      - MINIO_DAEMON_USER=root
      - MINIO_DAEMON_GROUP=root
    user: root
    volumes:
      - minio-data:/bitnami/minio/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - dataflow-network

  # Kafka no modo KRaft (sem Zookeeper)
  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      # Configurações KRaft
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:29092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:29092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      # Configurações gerais
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_KRAFT_CLUSTER_ID=5L6g3nShT-eMCtK--X86sw
      # Minio (S3) configurações
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_ENDPOINT=http://minio:9000
    volumes:
      - kafka-data:/bitnami/kafka
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - dataflow-network

  # UI moderna para o Kafka
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8090:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: DataLab Kafka
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      DYNAMIC_CONFIG_ENABLED: 'true'
      SERVER_SERVLET_CONTEXT_PATH: "/"
    networks:
      - dataflow-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Service Discovery
  consul:
    image: bitnami/consul:latest
    container_name: consul
    ports:
      - "8500:8500"
      - "8600:8600/udp"
    environment:
      - CONSUL_BIND_INTERFACE=eth0
      - CONSUL_HTTP_PORT_NUMBER=8500
      - CONSUL_DNS_PORT_NUMBER=8600
      - CONSUL_AGENT_MODE=server
      - CONSUL_BOOTSTRAP_EXPECT=1
      - CONSUL_DISABLE_HOSTNAME=true
      - CONSUL_ENABLE_UI=true
      - BITNAMI_DEBUG=true
      - CONSUL_DAEMON_USER=root
      - CONSUL_DAEMON_GROUP=root
      - CONSUL_DAEMON_UID=0
      - CONSUL_DAEMON_GID=0
    user: root
    volumes:
      - consul-data:/bitnami/consul
    networks:
      - dataflow-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 500M
    healthcheck:
      test: ["CMD", "consul", "members"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  minio-data:
  kafka-data:
  consul-data:

networks:
  dataflow-network:
    driver: bridge
