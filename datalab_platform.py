#!/usr/bin/env python3
"""
DataLab Unified Platform - Plataforma Unificada de Dados
Sistema integrado completo para processamento, an√°lise e ML

Este √© o ponto de entrada principal da plataforma DataLab.
Integra todos os componentes em uma arquitetura coesa e escal√°vel.
"""

import argparse
import asyncio
import logging
import os
import sys
from pathlib import Path
from typing import Any, Dict, List, Optional

# Adicionar diret√≥rios ao path
sys.path.insert(0, str(Path(__file__).parent))
sys.path.insert(0, str(Path(__file__).parent / "core"))
sys.path.insert(0, str(Path(__file__).parent / "flows"))

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[logging.StreamHandler(), logging.FileHandler("logs/datalab.log")],
)

logger = logging.getLogger(__name__)


class DataLabPlatform:
    """
    Plataforma Unificada DataLab
    Orquestra todos os componentes do ecossistema de dados
    """

    def __init__(self, config_path: Optional[str] = None):
        """Inicializa a plataforma DataLab"""
        self.config_path = config_path or "config/platform.yaml"
        self.core_platform = None
        self.orchestrator = None
        self.config = None

        # Status da plataforma
        self.is_initialized = False
        self.running_services = []

    async def initialize(self):
        """Inicializa todos os componentes da plataforma"""
        logger.info("üöÄ Inicializando DataLab Platform...")

        try:
            # 1. Inicializar configura√ß√£o
            await self._initialize_config()

            # 2. Inicializar plataforma core
            await self._initialize_core_platform()

            # 3. Inicializar orquestrador
            await self._initialize_orchestrator()

            # 4. Registrar pipelines padr√£o
            await self._register_default_pipelines()

            # 5. Verificar sa√∫de dos servi√ßos
            await self._perform_health_checks()

            self.is_initialized = True
            logger.info("‚úÖ DataLab Platform inicializada com sucesso!")

        except Exception as e:
            logger.error(f"‚ùå Falha na inicializa√ß√£o da plataforma: {e}")
            raise

    async def _initialize_config(self):
        """Inicializa sistema de configura√ß√£o"""
        try:
            from core.config import DataLabConfig

            self.config = DataLabConfig()
            logger.info("‚úÖ Sistema de configura√ß√£o inicializado")
        except ImportError as e:
            logger.warning(f"‚ö†Ô∏è Sistema de configura√ß√£o n√£o dispon√≠vel: {e}")
            self.config = None

    async def _initialize_core_platform(self):
        """Inicializa plataforma core"""
        try:
            from core.platform import DataLabCore

            self.core_platform = DataLabCore()

            # Registrar servi√ßos principais
            await self._register_core_services()

            logger.info("‚úÖ Plataforma core inicializada")
        except ImportError as e:
            logger.warning(f"‚ö†Ô∏è Plataforma core n√£o dispon√≠vel: {e}")
            self.core_platform = None

    async def _initialize_orchestrator(self):
        """Inicializa orquestrador unificado"""
        try:
            from core.orchestrator import UnifiedOrchestrator

            self.orchestrator = UnifiedOrchestrator()
            logger.info("‚úÖ Orquestrador unificado inicializado")
        except ImportError as e:
            logger.warning(f"‚ö†Ô∏è Orquestrador n√£o dispon√≠vel: {e}")
            self.orchestrator = None

    async def _register_core_services(self):
        """Registra servi√ßos principais da plataforma"""
        if not self.core_platform:
            return

        services = [
            {
                "name": "prefect-server",
                "type": "orchestration",
                "endpoint": "http://localhost:4200",
                "health_check": "http://localhost:4200/api/health",
                "port": 4200,
            },
            {
                "name": "spark-master",
                "type": "compute",
                "endpoint": "http://localhost:8080",
                "health_check": "http://localhost:8080",
                "port": 8080,
            },
            {
                "name": "minio",
                "type": "storage",
                "endpoint": "http://localhost:9000",
                "health_check": "http://localhost:9000/minio/health/live",
                "port": 9000,
            },
            {
                "name": "mlflow",
                "type": "ml_tracking",
                "endpoint": "http://localhost:5000",
                "health_check": "http://localhost:5000/health",
                "port": 5000,
            },
            {
                "name": "streamlit",
                "type": "dashboard",
                "endpoint": "http://localhost:8501",
                "health_check": "http://localhost:8501/healthz",
                "port": 8501,
            },
            {
                "name": "jupyterhub",
                "type": "notebook",
                "endpoint": "http://localhost:8000",
                "health_check": "http://localhost:8000/hub/health",
                "port": 8000,
            },
        ]

        for service_config in services:
            await self.core_platform.register_service(
                service_config["name"], service_config
            )

    async def _register_default_pipelines(self):
        """Registra pipelines padr√£o da plataforma"""
        if not self.orchestrator:
            return

        # Pipeline ETL Medallion
        self.orchestrator.register_pipeline(
            "medallion_etl",
            ["bronze_ingestion", "silver_processing", "gold_aggregation"],
            schedule="0 6 * * *",  # Di√°rio √†s 6h
            enabled=True,
        )

        # Pipeline de Monitoramento
        self.orchestrator.register_pipeline(
            "monitoring",
            ["health_check", "metrics_collection", "alert_processing"],
            schedule="*/5 * * * *",  # A cada 5 minutos
            enabled=True,
        )

        # Pipeline MLOps
        self.orchestrator.register_pipeline(
            "mlops",
            ["model_training", "model_validation", "model_deployment"],
            schedule="0 2 * * 1",  # Semanalmente √†s 2h da segunda-feira
            enabled=True,
        )

        logger.info("‚úÖ Pipelines padr√£o registrados")

    async def _perform_health_checks(self):
        """Realiza verifica√ß√µes de sa√∫de iniciais"""
        if not self.core_platform:
            logger.warning("‚ö†Ô∏è Verifica√ß√µes de sa√∫de n√£o dispon√≠veis")
            return

        try:
            health_status = await self.core_platform.check_all_services_health()

            healthy_services = [
                service
                for service, status in health_status.items()
                if str(status) == "ServiceStatus.HEALTHY"
            ]

            self.running_services = healthy_services

            logger.info(f"‚úÖ Servi√ßos saud√°veis: {len(healthy_services)}")
            logger.info(f"üìä Status dos servi√ßos: {health_status}")

        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro nas verifica√ß√µes de sa√∫de: {e}")

    async def start_services(self, services: Optional[List[str]] = None):
        """Inicia servi√ßos espec√≠ficos ou todos"""
        logger.info("üîÑ Iniciando servi√ßos...")

        # TODO: Implementar inicializa√ß√£o real dos servi√ßos via Docker Compose
        # Por enquanto, apenas log
        services_to_start = services or [
            "prefect-server",
            "spark-master",
            "minio",
            "mlflow",
            "streamlit",
            "jupyterhub",
        ]

        for service in services_to_start:
            logger.info(f"‚ñ∂Ô∏è Iniciando {service}...")
            # Aqui seria feita a chamada real para Docker Compose
            # subprocess.run(["docker-compose", "up", "-d", service])

        logger.info("‚úÖ Servi√ßos iniciados!")

    async def stop_services(self, services: Optional[List[str]] = None):
        """Para servi√ßos espec√≠ficos ou todos"""
        logger.info("üõë Parando servi√ßos...")

        services_to_stop = services or self.running_services

        for service in services_to_stop:
            logger.info(f"‚èπÔ∏è Parando {service}...")
            # subprocess.run(["docker-compose", "stop", service])

        logger.info("‚úÖ Servi√ßos parados!")

    async def execute_pipeline(
        self, pipeline_name: str, parameters: Optional[Dict] = None
    ):
        """Executa um pipeline espec√≠fico"""
        if not self.orchestrator:
            logger.error("‚ùå Orquestrador n√£o dispon√≠vel")
            return None

        logger.info(f"üöÄ Executando pipeline: {pipeline_name}")

        try:
            execution = await self.orchestrator.execute_pipeline(
                pipeline_name, parameters
            )
            logger.info(f"‚úÖ Pipeline {pipeline_name} executado: {execution.id}")
            return execution
        except Exception as e:
            logger.error(f"‚ùå Erro na execu√ß√£o do pipeline {pipeline_name}: {e}")
            raise

    async def get_platform_status(self) -> Dict[str, Any]:
        """Retorna status completo da plataforma"""
        status = {
            "platform": {
                "initialized": self.is_initialized,
                "running_services": len(self.running_services),
                "total_services": 6,  # N√∫mero de servi√ßos core
            },
            "components": {
                "core_platform": self.core_platform is not None,
                "orchestrator": self.orchestrator is not None,
                "config": self.config is not None,
            },
        }

        # Adicionar status do orquestrador se dispon√≠vel
        if self.orchestrator:
            orchestrator_status = await self.orchestrator.get_status()
            status["orchestrator"] = orchestrator_status

        # Adicionar status da plataforma core se dispon√≠vel
        if self.core_platform:
            platform_status = self.core_platform.get_platform_status()
            status["platform"].update(platform_status)

        return status

    async def shutdown(self):
        """Desliga a plataforma graciosamente"""
        logger.info("üîÑ Desligando DataLab Platform...")

        # Parar pipelines ativos
        if self.orchestrator:
            await self.orchestrator.stop_all_pipelines()

        # Parar servi√ßos
        await self.stop_services()

        logger.info("‚úÖ DataLab Platform desligada com sucesso!")


# CLI para controle da plataforma
async def main():
    """Fun√ß√£o principal da CLI"""
    parser = argparse.ArgumentParser(description="DataLab Unified Platform")
    parser.add_argument(
        "command",
        choices=["init", "start", "stop", "status", "pipeline", "health"],
        help="Comando a executar",
    )
    parser.add_argument("--service", help="Servi√ßo espec√≠fico")
    parser.add_argument("--pipeline", help="Pipeline espec√≠fico")
    parser.add_argument("--config", help="Arquivo de configura√ß√£o")

    args = parser.parse_args()

    # Criar inst√¢ncia da plataforma
    platform = DataLabPlatform(config_path=args.config)

    try:
        if args.command == "init":
            await platform.initialize()

        elif args.command == "start":
            await platform.initialize()
            services = [args.service] if args.service else None
            await platform.start_services(services)

        elif args.command == "stop":
            services = [args.service] if args.service else None
            await platform.stop_services(services)

        elif args.command == "status":
            await platform.initialize()
            status = await platform.get_platform_status()
            print("üìä Status da Plataforma DataLab:")
            print(f"   Inicializada: {status['platform']['initialized']}")
            print(f"   Servi√ßos Ativos: {status['platform']['running_services']}")
            print(f"   Componentes: {status['components']}")

        elif args.command == "pipeline":
            if not args.pipeline:
                print("‚ùå Especifique um pipeline com --pipeline")
                return
            await platform.initialize()
            await platform.execute_pipeline(args.pipeline)

        elif args.command == "health":
            await platform.initialize()
            await platform._perform_health_checks()

    except KeyboardInterrupt:
        logger.info("üõë Interrompido pelo usu√°rio")
    except Exception as e:
        logger.error(f"‚ùå Erro: {e}")
    finally:
        await platform.shutdown()


if __name__ == "__main__":
    # Criar diret√≥rio de logs se n√£o existir
    os.makedirs("logs", exist_ok=True)

    # Executar plataforma
    asyncio.run(main())
