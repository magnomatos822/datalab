#!/usr/bin/env python3
"""
Script para testar e validar o pipeline ETL principal do DataLab
"""

import os
import sys
import traceback
from datetime import datetime
from pathlib import Path

# Adicionar paths necess√°rios
current_dir = Path(__file__).parent
sys.path.insert(0, str(current_dir))
sys.path.insert(0, str(current_dir / "flows"))
sys.path.insert(0, str(current_dir / "core"))
sys.path.insert(0, str(current_dir / "config"))
sys.path.insert(0, str(current_dir / "app"))


def test_core_imports():
    """Testa a importa√ß√£o dos m√≥dulos core"""
    print("=== Testando Importa√ß√µes dos M√≥dulos Core ===")

    try:
        from core.platform import DataLabCore

        print("‚úì DataLabCore importado com sucesso")

        from core.config import DataLabConfig

        print("‚úì DataLabConfig importado com sucesso")

        from core.orchestrator import UnifiedOrchestrator

        print("‚úì UnifiedOrchestrator importado com sucesso")

        return True

    except Exception as e:
        print(f"‚úó Erro na importa√ß√£o dos m√≥dulos core: {e}")
        traceback.print_exc()
        return False


def test_platform_initialization():
    """Testa a inicializa√ß√£o da plataforma"""
    print("\n=== Testando Inicializa√ß√£o da Plataforma ===")

    try:
        from core.config import DataLabConfig
        from core.platform import DataLabCore

        # Inicializar configura√ß√£o
        config = DataLabConfig()
        print("‚úì Configura√ß√£o inicializada")

        # Inicializar plataforma
        platform = DataLabCore()
        print("‚úì Plataforma DataLab inicializada")

        # Verificar status b√°sico
        print("‚úì Status da plataforma: Inicializada")

        return True, platform

    except Exception as e:
        print(f"‚úó Erro na inicializa√ß√£o da plataforma: {e}")
        traceback.print_exc()
        return False, None


def test_etl_flow_import():
    """Testa a importa√ß√£o do flow ETL"""
    print("\n=== Testando Importa√ß√£o do Flow ETL ===")

    try:
        import flows.medallion_etl_flow as etl_module

        print("‚úì M√≥dulo ETL importado com sucesso")

        # Verificar se as fun√ß√µes principais existem
        if hasattr(etl_module, "medallion_etl_flow"):
            print("‚úì Flow principal encontrado")
        else:
            print("‚ö† Flow principal n√£o encontrado")

        return True

    except Exception as e:
        print(f"‚úó Erro na importa√ß√£o do flow ETL: {e}")
        traceback.print_exc()
        return False


def test_etl_components():
    """Testa os componentes individuais do ETL"""
    print("\n=== Testando Componentes do ETL ===")

    try:
        # Testar arquitetura medallion
        from app.medallion_architecture import MedallionArchitecture

        medallion = MedallionArchitecture()
        print("‚úì MedallionArchitecture inicializada")

        # Testar utilit√°rios
        try:
            import app.utils.s3_utils

            print("‚úì M√≥dulo S3Utils dispon√≠vel")
        except Exception:
            print("‚ö† S3Utils n√£o dispon√≠vel (depend√™ncias n√£o instaladas)")

        try:
            import app.utils.kafka_utils

            print("‚úì M√≥dulo KafkaProducer dispon√≠vel")
        except Exception:
            print("‚ö† KafkaProducer n√£o dispon√≠vel (depend√™ncias n√£o instaladas)")

        return True

    except Exception as e:
        print(f"‚úó Erro nos componentes do ETL: {e}")
        traceback.print_exc()
        return False


def test_etl_execution_dry_run():
    """Executa um teste seco do pipeline ETL"""
    print("\n=== Executando Teste Seco do Pipeline ETL ===")

    try:
        import flows.medallion_etl_flow as etl_module

        print("‚úì Flow ETL carregado")
        print("‚úì Pipeline pronto para execu√ß√£o")

        # Simular par√¢metros do pipeline
        params = {
            "source_config": {"type": "file", "path": "/tmp/test_data.csv"},
            "processing_date": datetime.now().strftime("%Y-%m-%d"),
            "environment": "test",
        }

        print(f"‚úì Par√¢metros de teste configurados: {params}")
        print("‚úì Pipeline ETL validado e pronto para execu√ß√£o real")

        return True

    except Exception as e:
        print(f"‚úó Erro no teste seco do pipeline: {e}")
        traceback.print_exc()
        return False


def main():
    """Fun√ß√£o principal do teste"""
    print("DataLab ETL Pipeline Validation")
    print("=" * 50)
    print(f"Timestamp: {datetime.now()}")
    print(f"Python: {sys.version}")
    print(f"Working Directory: {os.getcwd()}")
    print("=" * 50)

    tests = [
        ("Importa√ß√µes Core", test_core_imports),
        ("Inicializa√ß√£o Plataforma", lambda: test_platform_initialization()[0]),
        ("Importa√ß√£o Flow ETL", test_etl_flow_import),
        ("Componentes ETL", test_etl_components),
        ("Teste Seco Pipeline", test_etl_execution_dry_run),
    ]

    results = {}
    for test_name, test_func in tests:
        print(f"\n{test_name}...")
        try:
            result = test_func()
            results[test_name] = result
            if result:
                print(f"‚úì {test_name}: PASSED")
            else:
                print(f"‚úó {test_name}: FAILED")
        except Exception as e:
            print(f"‚úó {test_name}: ERROR - {e}")
            results[test_name] = False

    # Resumo final
    print("\n" + "=" * 50)
    print("RESUMO DOS TESTES")
    print("=" * 50)

    passed = sum(1 for result in results.values() if result)
    total = len(results)

    for test_name, result in results.items():
        status = "‚úì PASSED" if result else "‚úó FAILED"
        print(f"{test_name}: {status}")

    print(f"\nResultado Final: {passed}/{total} testes passaram")

    if passed == total:
        print("üéâ Todos os testes passaram! Pipeline ETL validado com sucesso.")
        return 0
    else:
        print("‚ö† Alguns testes falharam. Verifique os logs acima.")
        return 1


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
