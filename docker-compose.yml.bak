version: '3.8'

# Este é o arquivo docker-compose.yml principal do DataLab.
# Ele foi reestruturado para maior escalabilidade e desacoplamento.
# Agora, os serviços estão separados em arquivos específicos por funcionalidade:
#
# - docker-compose.core.yml:        Serviços de infraestrutura core (MinIO, Kafka, Consul)
# - docker-compose.processing.yml:  Serviços de processamento de dados (Spark, NiFi)
# - docker-compose.ml.yml:          Serviços de machine learning (MLflow, Prefect, Airflow)
# - docker-compose.visualization.yml: Serviços de visualização (JupyterHub, Streamlit)
# - docker-compose.monitoring.yml:    Serviços de monitoramento (Prometheus, Grafana)
#
# Para iniciar serviços específicos ou todos os serviços, use o script:
# ./scripts/manage_environments.sh
#
# Exemplos de uso:
# ./scripts/manage_environments.sh start core
# ./scripts/manage_environments.sh start core processing
# ./scripts/manage_environments.sh start all
# ./scripts/manage_environments.sh stop ml
#
# Para ver o status dos serviços em execução:
# ./scripts/manage_environments.sh status

  # Apache Spark
  spark-master:
    image: apache/spark
    container_name: spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_RUN_AS_USER=root  # Executar como root para evitar problemas de permissão
      - ALLOW_PLAINTEXT_LISTENER=yes
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_ENDPOINT=http://minio:9000
    ports:
      - "7077:7077"
      - "8080:8080"
    volumes:
      - ./app:/opt/spark-apps
      - ./requirements.txt:/requirements.txt
      - ./config/minio:/opt/minio-config
    command: >
      bash -c "
        pip install --no-cache-dir --upgrade pip setuptools wheel &&
        pip install --no-cache-dir --default-timeout=100 --retries=5 -r /requirements.txt &&
        chmod +x /opt/minio-config/minio_setup.sh &&
        /opt/minio-config/minio_setup.sh spark-master &&
        /opt/bitnami/scripts/spark/entrypoint.sh /opt/bitnami/scripts/spark/run.sh
      "
    networks:
      - dataflow-network

  spark-worker:
    image: apache/spark
    deploy:
      mode: replicated
      replicas: 3
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_RUN_AS_USER=root  # Executar como root para evitar problemas de permissão
      - SPARK_WORKER_CORES=2
      - SPARK_WORKER_MEMORY=4G
      - ALLOW_PLAINTEXT_LISTENER=yes
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_ENDPOINT=http://minio:9000
    depends_on:
      - spark-master
      - minio
    ports:
      - "8081-8083:8081"
    volumes:
      - ./app:/opt/spark-apps
      - ./requirements.txt:/requirements.txt
      - ./config/minio:/opt/minio-config
    command: >
      bash -c "
        pip install --no-cache-dir --upgrade pip setuptools wheel &&
        pip install --no-cache-dir --default-timeout=100 --retries=5 -r /requirements.txt &&
        chmod +x /opt/minio-config/minio_setup.sh &&
        /opt/minio-config/minio_setup.sh spark-worker &&
        /opt/bitnami/scripts/spark/entrypoint.sh /opt/bitnami/scripts/spark/run.sh
      "
    networks:
      - dataflow-network

  # MLflow
  mlflow:
    build:
      context: ./config/mlflow
      dockerfile: Dockerfile
    container_name: mlflow
    user: root  # Executar como root para evitar problemas de permissão
    command: ["-m", "mlflow", "server", "--host", "0.0.0.0", "--backend-store-uri", "postgresql://postgres:postgres@10.10.120.125:5000/mlflow", "--default-artifact-root", "s3://mlflow/artifacts/"]
    ports:
      - "5000:5000"
    environment:
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    volumes:
      - ./config/minio:/opt/minio-config
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - dataflow-network

  # Prefect
  prefect:
    image: prefecthq/prefect:2.14.10-python3.11
    container_name: prefect
    entrypoint: ["prefect", "server", "start", "--host", "0.0.0.0", "--port", "4200"]
    ports:
      - "4200:4200"
    environment:
      - PREFECT_UI_API_URL=http://localhost:4200/api
      - PREFECT_API_URL=http://localhost:4200/api
      - PREFECT_HOME=/opt/prefect
      - PREFECT_SERVER_DATABASE_URL=s3://prefect/prefect.db
      - PREFECT_SERVER_DATABASE_MIGRATE_ON_START=true  # Garantir que as migrações sejam aplicadas corretamente
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_ENDPOINT=http://minio:9000
      - PREFECT_FILESYSTEMS_S3_BUCKET_PATH=s3://prefect
    volumes:
      - ./flows:/opt/prefect/flows  # Mantendo mapeamento para flows
      - ./config/minio:/opt/minio-config
    depends_on:
      - minio
    networks:
      - dataflow-network

  jupyter:
    image: jupyterhub/jupyterhub:latest
    container_name: jupyterhub
    ports:
      - "8888:8000"
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_ENDPOINT=http://minio:9000
      - JUPYTER_S3_BUCKET=jupyter
      - JUPYTERHUB_DATA_DIR=s3://jupyter
    volumes:
      - ./notebooks:/home/jovyan/work
      - ./jupyterhub_config.py:/srv/jupyterhub/jupyterhub_config.py
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker:/var/lib/docker
      - ./config/minio:/opt/minio-config
    command: >
      bash -c "apt-get update && apt-get install -y docker.io curl &&
      pip install notebook jupyterlab jupyterhub-idle-culler &&
      pip install jupyterhub oauthenticator dockerspawner &&
      jupyterhub -f /srv/jupyterhub/jupyterhub_config.py"
    networks:
      - dataflow-network
    depends_on:
      - minio
      - mlflow
      - prefect

  # Streamlit
  streamlit:
    build:
      context: ./config/streamlit
      dockerfile: Dockerfile
    container_name: streamlit
    ports:
      - "8501:8501"
    environment:
      - PATH=/.local/bin:${PATH}
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_ENDPOINT=http://minio:9000
    volumes:
      - ./app:/app
    networks:
      - dataflow-network
    depends_on:
      minio:
        condition: service_healthy
      mlflow:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501"]
      interval: 30s
      timeout: 10s
      retries: 3

  nifi:
    environment:
      - SINGLE_USER_CREDENTIALS_USERNAME=nifi
      - SINGLE_USER_CREDENTIALS_PASSWORD=HGd15bvfv8744ghbdhgdv7895agqERAo
      - TZ=America/Fortaleza
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_ENDPOINT=http://minio:9000
    image: apache/nifi:2.4.0
    container_name: apache-nifi
    ports:
      - "8443:8443"
    deploy:
      resources:
        limits:
          cpus: "0.95"
          memory: 1G
    restart: on-failure
    volumes: 
      - ./nifi/jdbc:/opt/nifi/nifi-current/jdbc
      - ./nifi/drivers:/opt/nifi/nifi-current/drivers
      - ./config/minio:/opt/minio-config
      - nifi-database-repository:/opt/nifi/nifi-current/database_repository
      - nifi-flowfile-repository:/opt/nifi/nifi-current/flowfile_repository
      - nifi-content-repository:/opt/nifi/nifi-current/content_repository
      - nifi-provenance-repository:/opt/nifi/nifi-current/provenance_repository
      - nifi-state:/opt/nifi/nifi-current/state
      - nifi-conf:/opt/nifi/nifi-current/conf # Para persistir nifi.properties se modificado
    networks:
      - dataflow-network
    # Comando inicial para baixar drivers comuns, se necessário
    command: >
      bash -c "
        mkdir -p /opt/nifi/nifi-current/drivers/postgres &&
        mkdir -p /opt/nifi/nifi-current/drivers/mysql &&
        mkdir -p /opt/nifi/nifi-current/drivers/mssql &&
        mkdir -p /opt/nifi/nifi-current/drivers/oracle &&
        cp /opt/nifi/nifi-current/jdbc/postgresql-42.6.0.jar /opt/nifi/nifi-current/drivers/postgres/ &&
        /opt/nifi/scripts/start.sh
      "

  # Kafka no modo KRaft (sem Zookeeper)
  kafka:
    image: apache/kafka:4.0.0
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      # Configurações básicas do KRaft (mantidas apenas como redundância)
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      # Mantendo CLUSTER_ID para formatação
      CLUSTER_ID: "5L6g3nShT-eMCtK--X86sw"
      # Configurações para S3
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      S3_ENDPOINT: http://minio:9000
      # KAFKA_LOG_DIRS: /var/lib/kafka/data/kraft-combined # Exemplo, ajuste conforme sua imagem/config
    volumes:
      - ./config/kafka/server.properties:/opt/kafka/config/kraft-server.properties
      - ./config/minio:/opt/minio-config
      - kafka-data:/var/lib/kafka/data # Volume para persistência dos logs do Kafka
    command: [ "sh", "-c", "/opt/kafka/bin/kafka-storage.sh format -t $${CLUSTER_ID} -c /opt/kafka/config/kraft-server.properties && /opt/kafka/bin/kafka-server-start.sh /opt/kafka/config/kraft-server.properties" ]
    healthcheck:
      test: [ "CMD-SHELL", "/opt/kafka/bin/kafka-topics.sh --bootstrap-server localhost:9092 --list" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - dataflow-network

  # UI moderna para o Kafka
  kafka-ui:
    image: provectuslabs/kafka-ui:v0.7.1
    container_name: kafka-ui
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8090:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: DataLab Kafka
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      # Removendo a configuração do Zookeeper já que não é mais necessária no modo KRaft
      # KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      DYNAMIC_CONFIG_ENABLED: 'true'
      SERVER_SERVLET_CONTEXT_PATH: "/"
    networks:
      - dataflow-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3

  airflow-webserver:
    build:
      context: ./config/airflow
      dockerfile: Dockerfile
    container_name: airflow-webserver
    environment:
      # Configuração para usar PostgreSQL com LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@10.10.120.125:5000/airflow
      - AIRFLOW__CORE__FERNET_KEY=YGeLO_5NQJ3x0bJoi4LzeFCIFZnRyFkD3TV1-IZzTmY=
      - AIRFLOW__WEBSERVER__SECRET_KEY=Mq6wNzo2xYiGIg0bTa6TQO8gPKDhJj0R
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__LOGGING__REMOTE_LOGGING=True
      - AIRFLOW__LOGGING__REMOTE_BASE_LOG_FOLDER=s3://airflow-logs
      - AIRFLOW__CORE__DAGS_FOLDER=s3://airflow-dags/dags/ # Carregar DAGs do MinIO
      - AIRFLOW_HOME=/opt/airflow
      - AIRFLOW_USER=airflow
      - AIRFLOW_UID=50000
      - AIRFLOW__WEBSERVER__EXPOSE_CONFIG=True
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_ENDPOINT=http://minio:9000
    ports:
      - "8070:8080"
    volumes:
      - ./config/minio:/opt/minio-config
      # - ./app/airflow/dags:/opt/airflow/dags # Removido, pois as DAGs virão do S3
      # - ./app:/opt/spark-apps:ro # Mantido se necessário para outras coisas além de DAGs
    command: bash -c "airflow db migrate && airflow webserver"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - dataflow-network

  airflow-scheduler:
    build:
      context: ./config/airflow
      dockerfile: Dockerfile
    container_name: airflow-scheduler
    depends_on:
      airflow-webserver:
        condition: service_healthy
    environment:
      # Atualizado para usar PostgreSQL com LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@10.10.120.125:5000/airflow
      - AIRFLOW__CORE__FERNET_KEY=YGeLO_5NQJ3x0bJoi4LzeFCIFZnRyFkD3TV1-IZzTmY=
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__LOGGING__REMOTE_LOGGING=True
      - AIRFLOW__LOGGING__REMOTE_BASE_LOG_FOLDER=s3://airflow-logs
      - AIRFLOW__CORE__DAGS_FOLDER=s3://airflow-dags/dags/ # Carregar DAGs do MinIO
      - AIRFLOW_HOME=/opt/airflow
      - AIRFLOW_USER=airflow
      - AIRFLOW_UID=50000
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_ENDPOINT=http://minio:9000
    volumes:
      - ./config/minio:/opt/minio-config
      # - ./app/airflow/dags:/opt/airflow/dags # Removido, pois as DAGs virão do S3
      # - ./app:/opt/spark-apps:ro # Mantido se necessário para outras coisas além de DAGs
    command: bash -c "airflow scheduler"
    networks:
      - dataflow-network

volumes:
    # Volume para os dados do MinIO. Outros serviços podem usar MinIO para armazenamento de artefatos e logs,
    # mas alguns (como Kafka e NiFi) utilizam volumes Docker dedicados para seus dados operacionais.
    minio-data:
    kafka-data: # Volume para logs de dados do Kafka
    nifi-database-repository: # Volumes para persistência do NiFi
    nifi-flowfile-repository:
    nifi-content-repository:
    nifi-provenance-repository:
    nifi-state:
    nifi-conf: # Volume para persistir a configuração do NiFi (ex: nifi.properties)

  # Service Discovery com Consul
  consul:
    image: hashicorp/consul:1.16.0
    container_name: consul
    ports:
      - "8500:8500"
      - "8600:8600/udp"
    command: "agent -server -ui -node=server-1 -bootstrap-expect=1 -client=0.0.0.0"
    volumes:
      - consul-data:/consul/data
    networks:
      - dataflow-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8500/v1/status/leader"]
      interval: 30s
      timeout: 10s
      retries: 5

networks:
  dataflow-network:
    driver: bridge